from google.colab import files
myfile = files.upload()

import seaborn as sns
import pandas as pd
import scipy.stats as stats
import matplotlib.pyplot as plt
import numpy as np


df = pd.read_csv('vgames2.csv')
df.drop('Unnamed: 0', axis=1, inplace=True) #.drop -> 행 열 삭제하기, axis=1->열삭제 ,axis=0->행삭제
df = df.sort_values('Name',ascending=False)
df = df.dropna(axis=0) #결측치 값을 모두 0으로 바꿈
print(df.columns)

def toflat(string): ## object -> float 변환함수
  return string.replace('K','').replace('M','')

df['NA_Sales'] = df['NA_Sales'].apply(toflat).astype(float).round(10) # object -> float 변환
df['EU_Sales'] = df['EU_Sales'].apply(toflat).astype(float).round(10) # object -> float 변환
df['JP_Sales'] = df['JP_Sales'].apply(toflat).astype(float).round(10) # object -> float 변환
df['Other_Sales'] = df['Other_Sales'].apply(toflat).astype(float).round(10) # object -> float 변환
df['NA_Sales'] = pd.to_numeric(df['NA_Sales']) #부동소수점으로 변환
df['EU_Sales'] = pd.to_numeric(df['EU_Sales']) #부동소수점으로 변환
df['JP_Sales'] = pd.to_numeric(df['JP_Sales']) #부동소수점으로 변환
df['Other_Sales'] = pd.to_numeric(df['Other_Sales']) #부동소수점으로 변환
df['Genre'] = df['Genre'].astype(str) #string으로 변환
df['Year'] = df['Year'].astype(int) #int로 변환
#필요한 컬럼을 변수에 저장
dfNa = df['NA_Sales']
dfEu = df['EU_Sales']
dfJp = df['JP_Sales']
dfot = df['Other_Sales']
dfge = df['Genre']
dfya = df['Year']
dfna = df['Name']

df.describe() #데이터요약
num_Year = df['Year'].unique() #데이터의 고유값 알아내기
num_Genre = df['Genre'].unique() #데이터의 고유값 알아내기 
num_Platform = df['Platform'].unique() #데이터의 고유값 알아내기
num_Year,num_Genre,num_Platform

df['Country'] = df['NA_Sales'] +  df['EU_Sales'] + df['JP_Sales'] + df['Other_Sales']
#전세계별 판매량을 Country 컬럼에 저장

#1.지역에 따라서 선호하는 게임 장르가 다를까?

#.groupby -> 같은값을 하나로 묶어 통계 또는 집계 결과를 얻기 위해 사용
df_Country = df.groupby(['Genre'])['Country'].sum()
df_NA = df.groupby(['Genre'])['NA_Sales'].sum()
df_EU = df.groupby(['Genre'])['EU_Sales'].sum()
df_JP = df.groupby(['Genre'])['JP_Sales'].sum()
df_Ot = df.groupby(['Genre'])['Other_Sales'].sum()
sns.set(rc = {'figure.figsize':(15,8)}) #그래프 사이즈 설정
sns.lineplot(data=df_Country,markers=True) #점선이 아닌 마커로 사용할경우 markers=True, 남색줄
sns.lineplot(data=df_NA,markers=True) #주황색줄
sns.lineplot(data=df_EU,markers=True) #초록색줄
sns.lineplot(data=df_JP,markers=True) #빨간색줄
sns.lineplot(data=df_Ot,markers=True)

#2.연도별 게임의 트렌드가 있을까?
#print(df['Year'])
#print(df['Genre'])
#df_01 = pd.concat([dfya,dfge],axis=1)
#df_01 = df_01.set_index('Year') # 인덱스를 컬럼명으로 지정하는방법
def changeCategory(x):
  if x <= 1990:
    return 'A'
  elif 1990 <= x <= 1995:
    return 'B'
  elif 1995 <= x <= 2000:
    return 'C'
  elif 2000 <= x <= 2005:
    return 'D'
  elif 2005 <= x <= 2010:
    return 'E'
  elif 2010 <= x <= 2015:
    return 'F'
  elif 2015 <= x <= 2020:
    return 'G'
df['newYear'] = df['Year'].apply(changeCategory)
dfnyear = df['newYear']
df_02 = pd.concat([dfnyear,dfge],axis=1)
df_02

df_01 = pd.crosstab(index = df['Genre'], columns=df['newYear'])
df_01

#3.출고량이 높은 게임에 대한 분석 및 시각화 프로세스

df_03 = df[['Name','Year','Genre','Country']] #df_03 name,year,genre,country 4개 컬럼으로 만듬
df_03 = df_03.sort_values(by=['Country'],ascending=False)
#Country를 기준으로 내림차순으로 정렬 (내림차순 -> ascending=False)
df_03 = df_03.reset_index(drop=True)
#행 인덱스 초기화, drop=True -> 기존 인덱스를 버리고 재배열 해준다
plt.figure(figsize=(25,15))
df_03barplot = sns.barplot(x='Name', y='Country', data=df_03.head(50)) 
#data -> df_03.head(20) 20개 까지만 출력
df_03

#1위 게임 의 나라별 판매량
df_04 = df[df['Name'] =='The Legend of Zelda: Ocarina of Time']
df_04 = df_04.drop(['Year','Platform','newYear'], axis=1)
df_04
sns.set(rc = {'figure.figsize':(10,5)})
sns.boxplot(data=df_04)
#전세계의 게임중 가장 많이 팔린 게임은 The Legend of Zelda: Ocarina of Time
#그래프르를 보면 북미지역이 다른 나라들을 합친것보다 많이 했다
